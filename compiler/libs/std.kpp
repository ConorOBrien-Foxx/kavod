.section "std.kpp"

ret

:mul
    jnt mul_zero
    swap
    jnt mul_zero
    copy
    zero
    swap
    :mul_loop
        sub 1
        swap
        load
        copy
        add
        swap
        jif mul_loop
    jump mul_end
    
    :mul_zero
        swap
        jump mul_end
    
    :mul_end
    load
    drop
    drop
    ret

:neg
    push 0
    swap
    sub
    ret

:gte
    dup2
    call gt
    pt 8
    call eq
    pf 8
    call or
    ret

:lte
    dup2
    call lt
    pt 8
    call eq
    pf 8
    call or
    ret

:gt
    sub
    call sign
    call eq 1
    ret

:lt
    sub
    call sign
    call eq -1
    ret

:eq
    sub
    call sign
    jnt eq_true
    :eq_false
        zero
        ret
    :eq_true
        add 1
        ret

:truth
    jif truth_true
    zero
    ret
    :truth_true
    zero
    add 1
    ret

:or
    ; if TOS is false, continue investigation
    jnt or_U
    drop
    jump or_true
    :or_U
        drop
        jif or_true
        zero
        ret
        
    :or_true
    zero
    add 1
    ret

:and
    jif and_U
    drop
    jump and_false
    :and_U
        drop
        jnt and_false
        zero
        add 1
        ret
    
    :and_false
    zero
    ret

:sign
    jif sign_not0
    ; only 0 passes here; since sign of 0 is 0, return
    ret
    :sign_not0
    ; the old "increment-decrement" approach
    dup
    :sign_loop
        add 1
        jnt sign_neg
        swap
        sub 1
        jnt sign_pos
        swap
        jump sign_loop
    :sign_pos
        ; <some number> 0
        add 1
        jump sign_end
    :sign_neg
        ; <some number> 0
        sub 1
        jump sign_end
    :sign_end
        swap
        drop
        ret

:divmodun
    ; vars: i, m
    pt 8 0 ; i
    pt 8 0 ; m
    swap
    add 1 ; x++ -- used instead of <= because its faster
    :divmodun_loop
        ; y (x+1)
        ; 8: i m
        pf 8 ; m
        copy
        swap
        copy
        ; y m (x+1)
        ; -1: m (x+1)
        call lt
        ; y (m < x+1)
        jnt divmodun_loop_end
        drop
        load
        pt 7
        dup
        load
        add
        pf 8
        add 1
        pt 8
        pt 8
        pf 7
        jump divmodun_loop
    
    :divmodun_loop_end
    drop
    ; y
    ; -1: m (x+1)
    ; 8: i
    load
    sub 1
    add
    load
    sub
    pf 8
    sub 1
    ret

;; UNSIGNED DIVMOD ;;
; https://en.wikipedia.org/wiki/Division_algorithm#Division_by_repeated_subtraction
; args: N D <divun>
; result: Remainder Quotient
:trial_divmodun
    pt 8 0 ;Q
    :trial_divun_loop
    dup2
    ; stack: N D N D
    call gte
    ; stack: N D (N>=D)
    jnt trial_divun_end
        ; N is now < D
        drop ; remove conditional
        ; Q++
        pf 8
        add 1
        pt 8
        ; stack: N D
        copy
        ; stack: N D
        ; reg: D
        sub
        load
        ; stack: (N-D) D
        jump trial_divun_loop
    
    :trial_divun_end
    ; stack 8: Q
    ; stack: R D 0
    drop
    drop
    pf 8
    ; stack: R Q
    ret

;; SIGNED DIVISION ;;
; much less complicated, yet control structures are BLEH.
; stack: N D
:divmod
    dup
    call lt 0
    ; if D < 0
    jif divmod_dneg
    drop
    
    swap
    dup
    call lt 0
    ; if N < 0
    jif divmod_nneg
    drop
    ; else
        swap
        call divmod
        ret
    
    ; D < 0; return R, -Q
    :divmod_dneg
        drop
        call neg
        call divmod
        ; R Q
        call neg
        ; R -Q
        ret
    
    :divmod_nneg
        drop
        call neg
        swap
        copy
        call divmod
        swap
        ; if R = 0
        jnt divmod_nneg_r0
        ; else
            load
            swap
            sub
            swap
            call neg
            sub 1
            ret
        
        ; R = 0
        :divmod_nneg_r0
            load ;
            drop ; clear TOS register
            swap
            call neg
            ret